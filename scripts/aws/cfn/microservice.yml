AWSTemplateFormatVersion: 2010-09-09
Description: 'Example microservice deploy'

Transform:
  - UpdateDeploymentTransform

Parameters:
  ProjectName:
    Type: String
    Description: 'Usually pn can be pnXYZ where XYZ are the feature number, useful to create
      experimental environments without crash official development environment'
  
  AlarmSNSTopicArn:
    Type: String
    Description: ARN of alarm topic

  ApiDnsName:
    Type: String
    Description: 'The DNS name used for B2B rest API.'

  WebApiDnsName:
    Type: String
    Description: 'The DNS name used for WEB rest API.'
  
  CorsAllowedDomains:
    Type: String
    Description: 'Comma separated list of domains allowed to make cross origin request'

  CheckoutApiBaseUrl:
    Type: String
    Description: 'Checkout endpoint base url'

  CheckoutSiteUrl:
   Type: String
   Description: 'Checkout site url'

  CheckoutCartApiBaseUrl:
    Type: String
    Description: 'Checkout cart endpoint base url'

  SelfcareUsergroupBaseUrl:
    Type: String
    Description: 'Selfcare endpoint base url'

  SelfcareUsergroupPnProductId:
    Type: String
    Description: 'Selfcare product id'

  ContainerImageUri:
    Type: String
    Description: 'Exact container image URI with full repository and image digest'

  MicroserviceNumber:
    Type: Number
    Description: 'Disambiguation useful for load balancer rules'

  TemplateBucketBaseUrl:
    Type: String
    Description: 'The S3 bucket from which to fetch the templates used by this stack.'

  ECSClusterName:
    Type: String
    Description: 'The name of the ECS cluster where the microservice is going to be deployed'

  SubnetsIds:
    Type: String
    Description: 'subnets ids comma separated list. Where to deploy the microservice'

  VpcId:
    Type: String
    Description: 'VpcId where the microservice is going to be deployed'
  
  EcsDefaultSecurityGroup:
    Type: String
    Description: 'Default security group required by infrastructure'

  ApplicationLoadBalancerListenerArn:
    Type: String
    Description: 'Load balancer listener where HTTP endpoints is going to be registered'

  ApplicationLoadBalancerDomain:
    Type: String
    Description: 'Base URL of the load balancer where the service is going to be reachable'

  NetworkLoadBalancerLink:
    Type: String
    Description: 'network load balancer link for API-GW'
  
  Version:
    Type: String
    Description: 'keep track of used projects commitIds'

  OptInSentTableName:
    Type: String
    Description: 'Name of dynamodb table containing OptInSent information'

  OptInSentTableArn:
    Type: String
    Description: 'ARN of dynamodb table containing OptInSent information'

  OnboardInstitutionsTableName:
    Type: String
    Description: 'Name of dynamodb table containing OnboardInstitutionsTable information'

  OnboardInstitutionsTableArn:
    Type: String
    Description: 'ARN of dynamodb table containing OnboardInstitutionsTable information'

  PortalUrl:
    Type: String
    Description: 'Url del portale della da inserire negli avvisi a IO'

  DeliveryPushInputsQueueName:
    Type: String
    Description: 'Queue to pull for inputs event'

  DeliveryPushInputsQueueARN:
    Type: String
    Description: 'Queue to pull for inputs event'

  LogsKinesisSourceStreamArn:
    Type: String
    Description: 'Kinesis stream to send logs to'
    
  AlbSecurityGroup:
    Type: String
    Description: 'Application load balancer security group'

  PnExternalRegistriesInsertTriggerLambdaEventSourceMappingBatchSize:
    Type: String
    Description: 'BatchSize stream mapping'

  LogsKinesisFilterPattern:
    Type: String
    Default: ""
    Description: 'Log kinesis filter pattern'

  KafkaBridgeOnboardingQueueARN:
    Type: String
    Description: 'Target queue ARN for insert trigger'

  KafkaBridgeOnboardingQueueURL:
    Type: String
    Description: 'Target queue URL for insert trigger'

Conditions:
  SendLogToKinesis: !Not [ !Equals [ !Ref LogsKinesisSourceStreamArn, '' ] ]

Resources:

  # PN-External-Registry microservice
  ExternalRegistryMicroservice:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/ecs-service.yaml"
      Parameters:
        MicroServiceUniqueName: !Sub '${ProjectName}-ExternalRegistry'
        CpuValue: 1024
        MemoryAmount: 2GB
        AlarmSNSTopicArn: !Ref AlarmSNSTopicArn
        ContainerImageURI: !Sub '${ContainerImageUri}'
        ContainerEnvEntry1: !Sub 'AWS_REGIONCODE=${AWS::Region}'
        ContainerEnvEntry2: !Sub 'CORS_ALLOWED_DOMAINS=${CorsAllowedDomains}'
        ContainerEnvEntry3: !Sub 'PN_EXTERNAL_REGISTRY_CHECKOUT_API_BASE_URL=${CheckoutApiBaseUrl}'
        ContainerEnvEntry4: !Sub 'PN_EXTERNAL_REGISTRY_CHECKOUT_SITE_URL=${CheckoutSiteUrl}'
        ContainerEnvEntry5: !Sub 'PN_EXTERNAL_REGISTRY_CHECKOUT_API_KEY={{resolve:secretsmanager:${ProjectName}-ExternalRegistries-Secrets:SecretString:CheckoutApiKey}}'
        ContainerEnvEntry6: !Sub 'PN_EXTERNAL_REGISTRY_IO_API_KEY={{resolve:secretsmanager:${ProjectName}-ExternalRegistries-Secrets:SecretString:IoApiKey}}'
        ContainerEnvEntry7: !Sub 'PN_EXTERNAL_REGISTRY_IOACT_API_KEY={{resolve:secretsmanager:${ProjectName}-ExternalRegistries-Secrets:SecretString:IoActApiKey}}'
        ContainerEnvEntry8: 'PN_EXTERNAL_REGISTRY_MOCK_DATA_RESOURCES={{resolve:ssm:MockPaList}}'
        ContainerEnvEntry9: !Sub 'PN_EXTERNAL_REGISTRY_SELFCAREUSERGROUP_BASE_URL=${SelfcareUsergroupBaseUrl}'
        ContainerEnvEntry10: !Sub 'PN_EXTERNAL_REGISTRY_SELFCAREUSERGROUP_API_KEY={{resolve:secretsmanager:${ProjectName}-ExternalRegistries-Secrets:SecretString:SelfCareApiKey}}'
        ContainerEnvEntry12: !Sub 'PN_EXTERNAL_REGISTRY_DYNAMODB_TABLE_NAME_OPT_IN=${OptInSentTableName}'
        ContainerEnvEntry13: !Sub 'PN_EXTERNAL_REGISTRY_IO_WHITELIST={{resolve:secretsmanager:${ProjectName}-ExternalRegistries-Secrets:SecretString:IoWhiteList}}'
        ContainerEnvEntry14: !Sub 'PN_EXTERNAL_REGISTRY_PIATTAFORMANOTIFICHEURL_TOS=${PortalUrl}/faq.html'
        ContainerEnvEntry15: !Sub 'PN_EXTERNAL_REGISTRY_PIATTAFORMANOTIFICHEURL_PRIVACY=${PortalUrl}/privacy.html'
        ContainerEnvEntry16: !Sub 'PN_EXTERNAL_REGISTRY_SELFCAREUSERGROUP_PN_PRODUCT_ID=${SelfcareUsergroupPnProductId}'
        ContainerEnvEntry17: !Sub 'PN_EXTERNAL_REGISTRY_TOPICS_DELIVERY_PUSH_INPUT=${DeliveryPushInputsQueueName}'
        ContainerEnvEntry18: !Sub 'PN_EXTERNAL_REGISTRY_CHECKOUT_CART_API_BASE_URL=${CheckoutCartApiBaseUrl}'
        ContainerEnvEntry19: !Sub 'PN_EXTERNAL_REGISTRY_DYNAMODB_TABLE_NAME_ONBOARD_INSTITUTIONS=${OnboardInstitutionsTableName}'
        MappedPaths: '/ext-registry/*,/ext-registry-private/*,/ext-registry-b2b/*'
        ECSClusterName: !Ref ECSClusterName
        Subnets: !Ref SubnetsIds
        VpcId: !Ref VpcId
        EcsDefaultSecurityGroup: !Ref EcsDefaultSecurityGroup
        LoadBalancerListenerArn: !Ref ApplicationLoadBalancerListenerArn
        LoadbalancerRulePriority: !Ref MicroserviceNumber
        TaskRoleManagedPolicyArn: !Ref ExternalRegistryMicroserviceTaskManagedPolicy
        AlbSecurityGroup: !Ref AlbSecurityGroup


  ExternalRegistryMicroserviceTaskManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
              - dynamodb:ExecuteTransaction
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:DeleteItem
              - dynamodb:Query
              - dynamodb:TransactGetItems
              - dynamodb:TransactWriteItems
              - dynamodb:UpdateItem
            Resource:
              - !Ref OptInSentTableArn
              - !Sub "${OnboardInstitutionsTableArn}"
              - !Sub "${OnboardInstitutionsTableArn}/*"
          - Effect: Allow
            Action:
              - sqs:ChangeMessageVisibility
              - sqs:ChangeMessageVisibilityBatch
              - sqs:DeleteMessage
              - sqs:DeleteMessageBatch
              - sqs:GetQueueAttributes
              - sqs:GetQueueUrl
              - sqs:ReceiveMessage
              - sqs:SendMessage
              - sqs:SendMessageBatch
            Resource:
              - !Ref DeliveryPushInputsQueueARN

  ###      KEY PAIR PER CREARE JWT NECESSARIO PER ACCEDERE AI SERVIZI M2M DI PDND    ###
  ###   La chiave viene impiegata per firmare il client assertion che serve          ###
  ###   per richedere a PDND il JWT da utilizzare per invocare i servizi M2M di PDND ###
  ######################################################################################
  PDNDSessionTokenSigningKey:
    Type: 'AWS::KMS::Key'
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Description: RSA-2048 key to generate session token
      KeySpec: RSA_2048
      KeyUsage: SIGN_VERIFY
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'

  # Application use this alias to access the public/private key pair
  PDNDSessionTokenSigningKeyAlias:
    Type: 'AWS::KMS::Alias'
    Properties:
      AliasName: !Sub 'alias/${ProjectName}-pdnd-authentication-token-key'
      TargetKeyId: !Ref PDNDSessionTokenSigningKey

  ###      KEY PAIR PER CREARE JWT NECESSARIO PER ACCEDERE AI SERVIZI ANPR DI PDND    ###
  ###   La chiave viene impiegata per firmare il client assertion che serve           ###
  ###   per richedere a PDND il JWT da utilizzare per invocare i servizi di ANPR      ###
  #######################################################################################
  PdndAnprSessionTokenSigningKey:
    Type: 'AWS::KMS::Key'
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Description: RSA-2048 key to generate session token
      KeySpec: RSA_2048
      KeyUsage: SIGN_VERIFY
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'

  # Application use this alias to access the public/private key pair
  PdndAnprSessionTokenSigningKeyAlias:
    Type: 'AWS::KMS::Alias'
    Properties:
      AliasName: !Sub 'alias/${ProjectName}-PdndAnpr-authentication-token-key'
      TargetKeyId: !Ref PdndAnprSessionTokenSigningKey

  # Expose PN-ExternalRegistry microservice public API with API-GW for WEB usage
  ExternalRegistryMicroservicePublicWebAPI:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/api-gw-expose-service.yaml"
      Parameters:
        MicroServiceUniqueName: !Sub '${ProjectName}-ExternalRegistry'
        IntendedUsage: WEB
        DnsName: !Ref WebApiDnsName
        ProjectName: !Ref ProjectName
        ServiceApiPath: 'ext-registry'
        NetworkLoadBalancerLink: !Ref NetworkLoadBalancerLink
        ApplicationLoadBalancerDomain: !Ref ApplicationLoadBalancerDomain
        AlarmSNSTopicArn: !Ref AlarmSNSTopicArn
        CloudwatchLogKinesisStreamArn: !Ref LogsKinesisSourceStreamArn        
  ExternalRegistryMicroservicePublicWebApiWaf:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/api-gw-waf-acl.yaml"
      Parameters:
        WAFName: !Sub '${ProjectName}-ExternalRegistry-web'
        APIGatewayARNs: !GetAtt ExternalRegistryMicroservicePublicWebAPI.Outputs.APIGatewayARN

  # Expose PN-ExternalRegistry microservice public API with API-GW for B2B usage
  ExternalRegistryMicroservicePublicB2BAPI:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/api-gw-expose-service.yaml"
      Parameters:
        MicroServiceUniqueName: !Sub '${ProjectName}-ExternalRegistry'
        IntendedUsage: B2B
        DnsName: !Ref ApiDnsName
        ProjectName: !Ref ProjectName
        ServiceApiPath: 'ext-registry-b2b'
        NetworkLoadBalancerLink: !Ref NetworkLoadBalancerLink
        ApplicationLoadBalancerDomain: !Ref ApplicationLoadBalancerDomain
        AlarmSNSTopicArn: !Ref AlarmSNSTopicArn
        CloudwatchLogKinesisStreamArn: !Ref LogsKinesisSourceStreamArn        
  ExternalRegistryMicroservicePublicB2BApiWaf:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/api-gw-waf-acl.yaml"
      Parameters:
        WAFName: !Sub '${ProjectName}-ExternalRegistry-b2b'
        APIGatewayARNs: !GetAtt ExternalRegistryMicroservicePublicB2BAPI.Outputs.APIGatewayARN

  # PN-External-Registry public api
  ExternalRegistryPublicB2BPaResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !GetAtt ExternalRegistryMicroservicePublicB2BAPI.Outputs.RestApiId
      ParentId: !GetAtt ExternalRegistryMicroservicePublicB2BAPI.Outputs.RootResourceId
      PathPart: pa
  ExternalRegistryPublicB2BV1Resource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !GetAtt ExternalRegistryMicroservicePublicB2BAPI.Outputs.RestApiId
      ParentId: !Ref ExternalRegistryPublicB2BPaResource
      PathPart: v1
  ExternalRegistryPublicB2BGroupsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !GetAtt ExternalRegistryMicroservicePublicB2BAPI.Outputs.RestApiId
      ParentId: !Ref ExternalRegistryPublicB2BV1Resource
      PathPart: groups

  ExternalRegistryPublicB2BGroupsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      OperationName: !Sub 'Proxy to ${ProjectName}-ExternalRegistry public groups API'
      RestApiId: !GetAtt ExternalRegistryMicroservicePublicB2BAPI.Outputs.RestApiId
      ResourceId: !Ref ExternalRegistryPublicB2BGroupsResource
      HttpMethod: GET
      ApiKeyRequired: true
      AuthorizationType: CUSTOM
      AuthorizerId: !GetAtt ExternalRegistryMicroservicePublicB2BAPI.Outputs.AuthorizerARN
      Integration:
        ConnectionType: VPC_LINK
        ConnectionId: !Ref NetworkLoadBalancerLink
        IntegrationHttpMethod: GET
        Type: HTTP_PROXY
        Uri: !Sub 'http://${ApplicationLoadBalancerDomain}:8080/ext-registry/pa/v1/groups'
        RequestParameters:
          integration.request.header.x-pagopa-pn-uid: context.authorizer.uid
          integration.request.header.x-pagopa-pn-cx-id: context.authorizer.cx_id
          integration.request.header.x-pagopa-pn-cx-type: context.authorizer.cx_type
          integration.request.header.x-pagopa-pn-cx-groups: context.authorizer.cx_groups
          integration.request.header.x-pagopa-pn-cx-role: context.authorizer.cx_role
        PassthroughBehavior: "WHEN_NO_MATCH"
        TimeoutInMillis: 29000

  # PN-External-Registry public api deployment
  ExternalRegistryPublicB2BDeploymentPnPlaceholderEpochSeconds:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ExternalRegistryPublicB2BGroupsMethod
    Properties:
      RestApiId: !GetAtt ExternalRegistryMicroservicePublicB2BAPI.Outputs.RestApiId

  ## Dashboard
  ExternalRegistriesMicroserviceCloudWatchDashboard:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/microservice-cloudwatch-dashboard.yaml"
      Parameters:
        DashboardName: !Sub "${ProjectName}-external-registries"
        DynamoDBTableNames: !Join 
          - ',' 
          - - !Ref OptInSentTableName
            - !Ref OnboardInstitutionsTableName
        RestApiStageArns: !Join
          - ','
          - - !GetAtt ExternalRegistryMicroservicePublicWebAPI.Outputs.RestApiStageArn
            - !GetAtt ExternalRegistryMicroservicePublicB2BAPI.Outputs.RestApiStageArn
        RestApiNames: !Join
          - ','
          - - !GetAtt ExternalRegistryMicroservicePublicWebAPI.Outputs.RestApiName
            - !GetAtt ExternalRegistryMicroservicePublicB2BAPI.Outputs.RestApiName
        LambdaArns: !Join
          - ','
          - - !GetAtt PnExternalRegistriesInsertTriggerLambda.Arn
        AlarmArns: !Join
          - ','
          - - !GetAtt ExternalRegistryMicroservice.Outputs.FatalLogsMetricAlarmArn
            - !GetAtt ExternalRegistryMicroservicePublicWebAPI.Outputs.RestApiErrorAlarmArn
            - !GetAtt ExternalRegistryMicroservicePublicB2BAPI.Outputs.RestApiErrorAlarmArn
            - !GetAtt ExternalRegistryMicroservicePublicWebAPI.Outputs.RestApiLatencyAlarmArn
            - !GetAtt ExternalRegistryMicroservicePublicB2BAPI.Outputs.RestApiLatencyAlarmArn

  # Lambda function role - this lambda needs to be triggered from a SQS queue and writes to a DynamoDB table
  PnExternalRegistriesInsertTriggerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-PnExternalRegistriesInsertTriggerLambdaRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub ${ProjectName}-PnExternalRegistriesInsertTriggerLambdaRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: allowSqs
                Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:ChangeMessageVisibility
                Resource:
                  - !Ref KafkaBridgeOnboardingQueueARN
              - Sid: writeOnDynamoDB
                Effect: Allow
                Action:
                  - dynamodb:DeleteItem
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:Scan
                  - dynamodb:UpdateItem
                Resource:
                  - !Ref OnboardInstitutionsTableArn
              - Sid: CanWriteLogs
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"

  PnExternalRegistriesInsertTriggerLambdaEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !Ref KafkaBridgeOnboardingQueueARN
      BatchSize: !Sub ${PnExternalRegistriesInsertTriggerLambdaEventSourceMappingBatchSize}
      FunctionName: !GetAtt PnExternalRegistriesInsertTriggerLambda.Arn
      Enabled: true
      # Add an OnFailure destination on the event source mapping

  ### Subscription filters with Kinesis  https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/SubscriptionFilters.html#DestinationKinesisExample
  SubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: SendLogToKinesis
    Properties:
      RoleArn:
        Fn::GetAtt:
          - "SubscriptionFilterServiceRole"
          - "Arn"
      LogGroupName: !Sub "/aws/lambda/${PnExternalRegistriesInsertTriggerLambda}"
      FilterPattern: !Ref LogsKinesisFilterPattern
      DestinationArn: !Ref LogsKinesisSourceStreamArn

  ### IAM Role used by Subscription filters to allow read logs from Cloudwatch and send logs to Kinesis Firehose
  SubscriptionFilterServiceRole:
    Type: AWS::IAM::Role
    Condition: SendLogToKinesis
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: logs.amazonaws.com
        Version: "2012-10-17"
      Path: /
      Policies:
        - PolicyName: !Sub '${ProjectName}-external-registries-lambda-logs-subscription-role'
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - kinesis:PutRecord
                Effect: Allow
                Resource: "*"
              - Action:
                  - "kms:Encrypt"
                  - "kms:GenerateDataKey"
                  - "kms:Decrypt"
                Effect: Allow
                Resource: "*"

  PnExternalRegistriesInsertTriggerLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      Runtime: nodejs16.x
      Description: 'It triggers the onboarding institutes written of sqs'
      MemorySize: 128
      Timeout: 10
      Role: !GetAtt PnExternalRegistriesInsertTriggerLambdaRole.Arn
      Layers:
        - !Sub "arn:aws:lambda:${AWS::Region}:339249233099:layer:LambdaInsightsExtension:13"
      Environment:
        Variables:
          QUEUE_URL: !Ref KafkaBridgeOnboardingQueueURL
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const dynamoDB = new AWS.DynamoDB.DocumentClient();
          
          exports.handler = async (event, context) => {
            //messages coming in from SQS are available on the 'Records' array property of the event object
            const { Records } = event;
            for (const record of Records) {
              try {
                const body = JSON.parse(record.body);
  
                //logging the incoming message body (view in cloudwatch):
                console.log("Incoming message body from SQS :", body);
  
                //configure params for writing data to dynamo DB:
                const params = {
                  TableName: 'pn-OnboardInstitutions',
                  Item: body
                };

                //write data to dynamo DB:
                await dynamoDB.put(params).promise();

                //success logging to cloudwatch:
                console.log('Successfully written to DynamoDB with id', body.id);
              } catch (error) {
                //error handling
                console.error('Error in executing lambda handler for SQS', error);
              }
            }
          }


Outputs:
  Version:
    Description: Git commit id of this file
    Value: !Ref Version
