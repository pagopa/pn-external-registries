AWSTemplateFormatVersion: 2010-09-09
Description: 'Example microservice deploy'

Parameters:
  ProjectName:
    Type: String
    Description: 'Usually pn can be pnXYZ where XYZ are the feature number, useful to create
      experimental environments without crash official development environment'

  ApiDnsName:
    Type: String
    Description: 'The DNS name used for B2B rest API.'

  WebApiDnsName:
    Type: String
    Description: 'The DNS name used for WEB rest API.'
  
  CorsAllowedDomains:
    Type: String
    Description: 'Comma separated list of domains allowed to make cross origin request'

  ContainerImageUri:
    Type: String
    Description: 'Exact container image URI with full repository and image digest'

  MicroserviceNumber:
    Type: Number
    Description: 'Disambiguation useful for load balancer rules'

  TemplateBucketBaseUrl:
    Type: String
    Description: 'The S3 bucket from which to fetch the templates used by this stack.'

  ECSClusterName:
    Type: String
    Description: 'The name of the ECS cluster where the microservice is going to be deployed'

  SubnetsIds:
    Type: String
    Description: 'subnets ids comma separated list. Where to deploy the microservice'

  VpcId:
    Type: String
    Description: 'VpcId where the microservice is going to be deployed'

  ApplicationLoadBalancerListenerArn:
    Type: String
    Description: 'Load balancer listener where HTTP endpoints is going to be registered'

  ApplicationLoadBalancerDomain:
    Type: String
    Description: 'Base URL of the load balancer where the service is going to be reachable'

  NetworkLoadBalancerLink:
    Type: String
    Description: 'network load balancer link for API-GW'

Resources:

  # PN-External-Registry microservice
  ExternalRegistryMicroservice:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/ecs-service.yaml"
      Parameters:
        MicroServiceUniqueName: !Sub '${ProjectName}-ExternalRegistry'
        CpuValue: 1024
        MemoryAmount: 2GB
        ContainerImageURI: !Sub '${ContainerImageUri}'
        ContainerEnvEntry1: !Sub 'AWS_REGIONCODE=${AWS::Region}'
        ContainerEnvEntry2: !Sub 'CORS_ALLOWED_DOMAINS=${CorsAllowedDomains}'
        MappedPaths: '/ext-registry-private/*'
        ECSClusterName: !Ref ECSClusterName
        Subnets: !Ref SubnetsIds
        VpcId: !Ref VpcId
        LoadBalancerListenerArn: !Ref ApplicationLoadBalancerListenerArn
        LoadbalancerRulePriority: !Ref MicroserviceNumber

#  ExternalRegistryMicroserviceTaskPolicy:
#    Type: AWS::IAM::Policy
#    Properties:
#      PolicyName: !Sub '${ProjectName}-ExternalRegistry-CustomTaskPolicy'
#      Roles:
#        - !GetAtt ExternalRegistryMicroservice.Outputs.TaskRoleName
#      PolicyDocument:
#        Version: 2012-10-17
#        Statement:
#          - Effect: Allow
#            Action:
#              - dynamodb:BatchGetItem
#              - dynamodb:BatchWriteItem
#              - dynamodb:ExecuteTransaction
#              - dynamodb:GetItem
#              - dynamodb:PutItem
#              - dynamodb:Query
#              - dynamodb:TransactGetItems
#              - dynamodb:TransactWriteItems
#              - dynamodb:UpdateItem
#            Resource:
#              - !Ref ExternalRegistryDynamoTableArn


  # Expose PN-ExternalRegistry microservice public API with API-GW for B2B usage
  ExternalRegistryMicroservicePrivateAPI:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/api-gw-expose-service.yaml"
      Parameters:
        MicroServiceUniqueName: !Sub '${ProjectName}-extreg'
        IntendedUsage: B2B
        DnsName: !Ref ApiDnsName
        ProjectName: !Ref ProjectName
        ServiceApiPath: 'ext-registry-private'
        NetworkLoadBalancerLink: !Ref NetworkLoadBalancerLink
        ApplicationLoadBalancerDomain: !Ref ApplicationLoadBalancerDomain