/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package it.pagopa.pn.ext.registries.privati.api;

import it.pagopa.pn.ext.registries.privati.model.AnalogDomicileDto;
import it.pagopa.pn.ext.registries.privati.model.DigitalDomicileDto;
import it.pagopa.pn.ext.registries.privati.model.RecipientTypeDto;

import java.util.UUID;

import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-03-14T15:48:37.049203200+01:00[Europe/Berlin]")
@Validated
public interface InfoDomicileApi {

    /**
     * GET /ext-registry-private/domiciles/v1/{recipientType}/{opaqueId}/analog : Read the analog domicile of a notification recipient
     * Read the analog domicile of a notification recipient. Il destinatario  può essere una persona fisica o una persona giuridica. 
     *
     * @param recipientType il tipo del destinatario (required)
     * @param opaqueId Identificativo universale univoco del destinatario (required)
     * @return OK (status code 200)
     *         or Invalid input (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/ext-registry-private/domiciles/v1/{recipientType}/{opaqueId}/analog",
        produces = { "application/json", "application/problem+json" }
    )
    default ResponseEntity<AnalogDomicileDto> _getOneAnalogDomicile(
         @PathVariable("recipientType") RecipientTypeDto recipientType,
         @PathVariable("opaqueId") UUID opaqueId
    ) {
        return getOneAnalogDomicile(recipientType, opaqueId);
    }

    // Override this method
    ResponseEntity<AnalogDomicileDto> getOneAnalogDomicile(RecipientTypeDto recipientType, UUID opaqueId);
        


    /**
     * GET /ext-registry-private/domiciles/v1/{recipientType}/{opaqueId}/digital : Read the digital domicile of a notification recipient
     * Read the digital domicile of a notification recipient. Il destinatario  può essere una persona fisica o una persona giuridica. 
     *
     * @param recipientType il tipo del destinatario (required)
     * @param opaqueId Identificativo universale univoco del destinatario (required)
     * @return OK (status code 200)
     *         or Invalid input (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/ext-registry-private/domiciles/v1/{recipientType}/{opaqueId}/digital",
        produces = { "application/json", "application/problem+json" }
    )
    default ResponseEntity<DigitalDomicileDto> _getOneDigitalDomicile(
         @PathVariable("recipientType") RecipientTypeDto recipientType,
         @PathVariable("opaqueId") UUID opaqueId
    ) {
        return getOneDigitalDomicile(recipientType, opaqueId);
    }

    // Override this method
    ResponseEntity<DigitalDomicileDto> getOneDigitalDomicile(RecipientTypeDto recipientType, UUID opaqueId);
        

}
