package it.pagopa.pn.ext.registries.common.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;

import java.util.ArrayList;
import java.util.List;

import lombok.*;

import javax.validation.Valid;
import javax.validation.constraints.*;


import javax.annotation.Generated;

/**
 * ProblemDto
 */

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-03-14T15:48:36.815856800+01:00[Europe/Berlin]")
@Builder
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class ProblemDto   {

  @JsonProperty("status")
  private Integer status;

  @JsonProperty("title")
  private String title;

  @JsonProperty("detail")
  private String detail;

  @JsonProperty("errors")
  @Valid
  private List<ProblemErrorDto> errors = new ArrayList<ProblemErrorDto>();

  public ProblemDto status(Integer status) {
    this.status = status;
    return this;
  }

  /**
   * The HTTP status code generated by the origin server for this occurrence of the problem.
   * minimum: 100
   * maximum: 600
   * @return status
  */
  @NotNull @Min(100) @Max(600) 
  public Integer getStatus() {
    return status;
  }

  public void setStatus(Integer status) {
    this.status = status;
  }

  public ProblemDto title(String title) {
    this.title = title;
    return this;
  }

  /**
   * A short, summary of the problem type. Written in english and readable
   * @return title
  */
  @NotNull @Pattern(regexp = "^[ -~]{0,64}$") @Size(max = 64) 
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public ProblemDto detail(String detail) {
    this.detail = detail;
    return this;
  }

  /**
   * A human readable explanation of the problem.
   * @return detail
  */
  @Pattern(regexp = "^.{0,1024}$") @Size(max = 4096) 
  public String getDetail() {
    return detail;
  }

  public void setDetail(String detail) {
    this.detail = detail;
  }

  public ProblemDto errors(List<ProblemErrorDto> errors) {
    this.errors = errors;
    return this;
  }

  public ProblemDto addErrorsItem(ProblemErrorDto errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<ProblemErrorDto>();
    }
    this.errors.add(errorsItem);
    return this;
  }

  /**
   * Get errors
   * @return errors
  */
  @NotNull @Valid @Size(min = 1) 
  public List<ProblemErrorDto> getErrors() {
    return errors;
  }

  public void setErrors(List<ProblemErrorDto> errors) {
    this.errors = errors;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProblemDto problem = (ProblemDto) o;
    return Objects.equals(this.status, problem.status) &&
        Objects.equals(this.title, problem.title) &&
        Objects.equals(this.detail, problem.detail) &&
        Objects.equals(this.errors, problem.errors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, title, detail, errors);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProblemDto {\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    detail: ").append(toIndentedString(detail)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

